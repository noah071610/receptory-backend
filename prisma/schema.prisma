// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId  String @id @unique
  email String @unique
  userName  String
  userImage String?
  color String @default("rgba(117, 130, 253, 1)")
  provider String
  plan Int @default(0)
  password String?

  saves Save[]
  pages Page[]
  notifications Notification[]
  createdAt DateTime @default(now())
}

model Notification {
  id  Int  @id @default(autoincrement())
  isRead Int @default(0)
  text String

  userId String
  user User  @relation(fields: [userId], references: [userId], onDelete: Cascade)


  createdAt DateTime @default(now())
}

model Template {
  pageId String @id @unique
  thumbnail String?
  title String
  description String?
  lang String

  templateLang String
  isSecret Int @default(0)
  
  content Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Save {
  pageId String @id @unique
  customLink String
  thumbnail String?
  title String
  description String?
  format String
  lang String
  
  content Json

  userId String
  user User  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  page Page?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customLink])
}


model Page {
  pageId String @id @unique
  customLink String @unique
  thumbnail String?
  title String
  description String?
  format String
  lang String
  
  analyser Json
  content Json

  save Save  @relation(fields: [pageId], references: [pageId], onDelete: Cascade)

  userId String
  user User  @relation(fields: [userId], references: [userId], onDelete: Cascade)


  confirmations Confirmation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([customLink])
}

model Confirmation {
  confirmId String @id @unique
  password String
  isConfirm Int @default(0)

  userId String

  text String
  startDate DateTime?
  endDate DateTime?
  startTime Int?
  endTime Int?

  content Json

  pageId String
  page Page  @relation(fields: [pageId], references: [pageId], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@fulltext([text])
}


model Website {
  id  Int  @id @default(autoincrement())
  type String
  text Json
  content Json
  lang String

  createdAt DateTime @default(now())
}